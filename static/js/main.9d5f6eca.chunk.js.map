{"version":3,"sources":["Employee/Employee.js","Employee/ListOfEmployees.js","BirthDayEmployee/BDayEmployee.js","BirthDayEmployee/ListOfBDayEmployees.js","App.js","reportWebVitals.js","index.js"],"names":["Employee","props","value","useContext","Context","useState","id","firstName","lastName","isSelected","employee","setEmployee","className","type","checked","onChange","prev","setEmployees","find","element","window","sessionStorage","setItem","JSON","stringify","setSelectedEmployees","employees","filter","ListOfEmployees","letters","split","map","letter","list","length","BDayEmployee","bdate","date","Date","getDate","getMonth","getFullYear","useEffect","selectedEmployees","mounth","index","dob","React","createContext","App","console","log","getItem","parse","fetch","then","response","json","forEach","sort","a","b","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9d5f6eca.chunk.js","sourcesContent":["import React, {useState, useContext} from \"react\";\r\nimport {Context} from \"../App\";\r\n\r\nfunction Employee(props){\r\n\r\n    const value = useContext(Context);\r\n\r\n    const [employee, setEmployee] = useState({\r\n        id: props.id,\r\n        firstName: props.firstName,\r\n        lastName: props.lastName,\r\n        isSelected: props.isSelected\r\n    });\r\n\r\n    function changeSelected(){\r\n        setEmployee(prev => {\r\n            return {\r\n                ...prev,\r\n                isSelected: !employee.isSelected\r\n            }\r\n        })\r\n        value.setEmployees(prev => {\r\n            prev.find(element => element.id === employee.id).isSelected = !prev.find(element => element.id === employee.id).isSelected;\r\n            window.sessionStorage.setItem('0', JSON.stringify(prev));\r\n            return prev;\r\n        })\r\n        value.setSelectedEmployees(value.employees.filter((element) => element.isSelected));\r\n    }\r\n\r\n    return (\r\n        <div className=\"inline\">\r\n            {employee.lastName + ' ' + employee.firstName}\r\n            <input type=\"checkbox\" checked={employee.isSelected} onChange={changeSelected}></input>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Employee;","import React, {useContext} from \"react\";\r\nimport Employee from './Employee';\r\nimport {Context} from \"../App\";\r\n\r\nfunction ListOfEmployees() {\r\n    let letters = (\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").split('');\r\n    const value = useContext(Context);\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                { \r\n                    letters.map((letter) => {\r\n                        let list = value.employees.filter((employee) => employee.lastName[0] === letter);\r\n                        return (\r\n                            <div className=\"ListOfEmployees\">\r\n                            <h3>{letter}</h3>\r\n                            { \r\n                                (list.length > 0) \r\n                                ? list.map((employee) => {\r\n                                    return (<Employee\r\n                                        key={employee.id}\r\n                                        id={employee.id}\r\n                                        firstName={employee.firstName}\r\n                                        lastName={employee.lastName}\r\n                                        isSelected={employee.isSelected}\r\n                                    />);\r\n                                }) : <span>____________</span>\r\n                            }\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default ListOfEmployees;","import React, {useState, useContext} from \"react\";\r\nimport {Context} from \"../App\";\r\n\r\nfunction BDayEmployee(props){\r\n\r\n    const value = useContext(Context);\r\n\r\n    const [employee, setEmployee] = useState({\r\n        id: props.id,\r\n        firstName: props.firstName,\r\n        lastName: props.lastName,\r\n        bdate: props.bdate\r\n    });\r\n\r\n    let mounths = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n    let date = new Date(employee.bdate);\r\n\r\n\r\n    return (\r\n        <div className=\"inline\">\r\n            {employee.lastName + ' ' + employee.firstName + \" - \" + date.getDate() + \" \" + mounths[date.getMonth()] + \", \" + date.getFullYear() + \" year\"}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BDayEmployee;","import React, {useContext, useEffect} from \"react\";\r\nimport BDayEmployee from \"./BDayEmployee\";\r\n\r\nimport {Context} from \"../App\";\r\n\r\nfunction ListOfEmployees() {\r\n        \r\n    const value = useContext(Context);\r\n    let mounths = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n    useEffect(() => {\r\n        \r\n    }, value.selectedEmployees);\r\n\r\n    return (\r\n            <div className=\"BDaysBlock\">\r\n            {\r\n            ((value.employees.filter((element) => element.isSelected)).length > 0) ?\r\n            <div>\r\n            { \r\n                mounths.map((mounth, index) => {\r\n                  let list = value.employees.filter((element) => element.isSelected).filter((element) => new Date(element.dob).getMonth() === index);\r\n                  if(list.length > 0){\r\n                    return (\r\n                        <div>\r\n                            <h3>{mounth}</h3>\r\n                            {\r\n                                list.map((employee) => {\r\n                                    return (\r\n                                        <BDayEmployee \r\n                                          key={employee.id}\r\n                                          id={employee.id}\r\n                                          firstName={employee.firstName}\r\n                                          lastName={employee.lastName}\r\n                                          bdate={employee.dob}\r\n                                        />\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n                    )\r\n                  }\r\n                  return null;\r\n                })\r\n            } \r\n            </div>\r\n            : <span>No selected employees</span>\r\n            }\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default ListOfEmployees;","\nimport React, {useState, useEffect} from 'react';\nimport './App.css';\nimport ListOfEmployees from './Employee/ListOfEmployees';\nimport ListofBDayEmployees from './BirthDayEmployee/ListOfBDayEmployees';\n\nexport const Context = React.createContext();\n\n\n\nfunction App(){\n  const [employees, setEmployees] = useState([]);\n  const [selectedEmployees, setSelectedEmployees] = useState([]);\n  const value = {employees, setEmployees, selectedEmployees, setSelectedEmployees};\n\n  useEffect(() => {\n    console.log(\"check\");\n    if(window.sessionStorage.getItem('0') !== null){\n      setEmployees(JSON.parse(window.sessionStorage.getItem('0')));\n    }else{\n      fetch(`https://yalantis-react-school-api.yalantis.com/api/task0/users`)\n    .then(response => response.json())\n    .then(json => {\n      json.forEach(element => {\n        element.isSelected = false\n      });\n      json.sort((a, b) => (a.lastName > b.lastName ? 1 : -1));  \n      setEmployees(json);\n    })\n    }\n  }, []);\n\n  return (\n    <Context.Provider value={value}>\n    <div className=\"Container\">\n      <div className=\"LeftBlock\">\n        <h2>Employees</h2>\n        <ListOfEmployees />\n      </div>\n      <div className=\"RightBlock\">\n        <h2>Employees birthday</h2>\n        <ListofBDayEmployees />\n      </div>\n    </div>\n    </Context.Provider>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />, document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}